/* eslint-disable @typescript-eslint/no-var-requires */
const path = require("path");
const fs = require("fs");
const shell = require("shelljs");
const pkg = require("./package.json");
const commonScripts = require("../../js-shared/_package-scripts");

const distFolderName = "build";
const distAbsPath = path.resolve(__dirname, `./${distFolderName}`);
const reactScript = "craco ";
// const reactScript = "react-scripts";

const apiUrl = process.env.API_URL_ALTERNATE || process.env.API_URL;
const webUrl = process.env.WEB_URL || "";

const devEnvs = `
  FAST_REFRESH=false \
  BROWSER=none \
  TSC_COMPILE_ON_ERROR=true \
  REACT_APP_API_URL=${apiUrl} \
  `;

const test_envs = `REACT_APP_API_URL=http://localhost:2222 IS_UNIT_TEST=true NODE_ENV=test`;

const test = `${test_envs} react-scripts test --runInBand`;

module.exports = {
  scripts: {
    ...commonScripts.scripts,
    default: {
      script: `${devEnvs} yarn ${reactScript} start`,
      description: `Start create react app server for development`,
    },
    build: {
      default: {
        script: `shx rm -rf ${distFolderName} && ${reactScript} build`,
        description: "Build the app for production",
      },
    },
    serve: {
      script: `yarn serve --single ${distAbsPath} --listen ${webUrl.replace(
        "http",
        "tcp",
      )}`,
      description: `Serve the app that has been built for production from
        ${webUrl}`,
    },
    test: {
      default: {
        script: test,
        description: "Test and watch create react app",
      },
      t: {
        script: `CI=true ${test} --forceExit`,
      },
      d: {
        script: `CI=true ${test_envs} react-scripts --inspect-brk test --runInBand --no-cache  `,
        description: "Debug create react app test",
      },
      dw: {
        script: `${test_envs} react-scripts --inspect-brk test --runInBand --no-cache`,
        description: "Debug and watch create react app test",
        // "node --inspect node_modules/.bin/jest --runInBand"
      },
      wc: {
        script: `${test} --coverage`,
        description: "Test create react app with watch and coverage",
      },
      c: {
        script: `shx rm -rf coverage && \
          CI=true ${test} --runInBand --coverage --forceExit`,
        description: "Test create react app with coverage",
      },
    },
    serviceWorker: `node -e 'require("./package-scripts").serviceWorker()'`,
  },
  serviceWorker() {
    const { copyWorkboxLibraries, injectManifest } = require("workbox-build");

    const workboxPath =
      "workbox-v" + pkg.devDependencies["workbox-build"].match(/(\d.+)/)[1];

    // remove unnecessary files generated by CRA
    shell.rm([
      `${distAbsPath}/service-worker.js`,
      `${distAbsPath}/static/js/*.LICENSE.txt`,
    ]);

    const swSrc = "service-worker.js";
    const swSrcAbsPath = path.resolve(__dirname, swSrc);
    const swTemplateSrc = path.resolve(__dirname, "service-worker.template.js");

    const swCode = fs
      .readFileSync(swTemplateSrc, "utf8")
      .replace(/%workboxPath%/g, workboxPath);

    fs.writeFileSync(swSrcAbsPath, swCode);

    copyWorkboxLibraries(distAbsPath);

    console.log(
      `\n*** copied workbox runtime libraries to "${path.resolve(
        distAbsPath,
        workboxPath,
      )}".`,
    );

    injectManifest({
      swSrc,
      swDest: `${distFolderName}/sw.js`,
      globDirectory: distFolderName,
      globPatterns: [
        "**/*.{js,css,png,svg,jpg,jpeg,ico,html,json}", //
      ],
      globIgnores: ["workbox-v*", "*.map", "precache-manifest.*"],
      // donnCacheBustURLsMatching: /(\.js$|\.css$|favicon.+ico$|icon-\d+.+png$)/,
    }).then(({ count, filePaths, size, warnings }) => {
      console.log(
        `\n*** ${count} files were preCached:\n\t${filePaths.join(
          "\t\n",
        )}\n*** total: ${size} bytes\n`,
      );

      if (warnings.length) {
        console.warn("--------WARNINGS-------\n", warnings, "\n");
      }

      shell.rm(swSrcAbsPath);
    });
  },
};
